#!/usr/bin/env bash
#
# warpclip - Remote-to-local clipboard integration for terminal users
# 
# Part of the WarpClip project: https://github.com/mquinnv/warpclip
# 
# This script provides seamless clipboard integration between remote servers
# and your local macOS machine when using SSH.

set -e

VERSION="1.1.1"

# Configuration - can be overridden with environment variables
PORT="${WARPCLIP_PORT:-9999}"      # Remote port (can be customized)
LOCAL_PORT="${WARPCLIP_LOCAL_PORT:-8888}"  # Local port (usually fixed)
TIMEOUT="${WARPCLIP_TIMEOUT:-5}"     # Connection timeout in seconds
REMOTE_INSTALL_PATH="${WARPCLIP_INSTALL_PATH:-$HOME/bin/warpclip}"  # Default remote installation path

# ANSI colors for prettier output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

print_header() {
    echo -e "${BLUE}${BOLD}$1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}" >&2
}

# Check if we're running on a remote server via SSH
check_remote() {
    if [[ -z "$SSH_CLIENT" && -z "$SSH_TTY" && -z "$SSH_CONNECTION" ]]; then
        print_warning "Not running in an SSH session."
        print_warning "This command is designed to run on a remote server, not locally."
        return 1
    fi
    return 0
}

# Check if dependencies are available
check_dependencies() {
    # Check for netcat
    if ! command -v nc &> /dev/null; then
        print_error "Required dependency 'nc' (netcat) is not installed."
        echo "Please install netcat on this system to use warpclip."
        return 1
    fi
    return 0
}

# Check if the SSH tunnel is properly set up
check_tunnel() {
    # Try to connect to localhost:PORT with a short timeout
    if ! nc -z -w1 localhost $PORT &>/dev/null; then
        return 1
    fi
    return 0
}

# Function to send data to the clipboard
copy_to_clipboard() {
    # Use timeout if available to ensure the command doesn't hang indefinitely
    local data_status=0
    
    if command -v timeout &>/dev/null; then
        timeout $TIMEOUT nc localhost $PORT
        data_status=$?
        if [ $data_status -eq 124 ]; then
            print_error "Connection timed out after $TIMEOUT seconds."
            return 1
        elif [ $data_status -ne 0 ]; then
            print_error "Failed to send data (exit code $data_status)."
            return 1
        fi
    else
        # If timeout is not available, use plain nc with its timeout option if supported
        nc -w $TIMEOUT localhost $PORT
        data_status=$?
        if [ $data_status -ne 0 ]; then
            print_error "Failed to send data (exit code $data_status)."
            return 1
        fi
    fi
    
    return 0
}

# -----------------------------------------------------------------------------
# Command functions
# -----------------------------------------------------------------------------

# Show help message
cmd_help() {
    cat <<EOF
${BOLD}WarpClip v$VERSION${NC} - Remote-to-local clipboard integration

${BOLD}USAGE:${NC}
  ${BOLD}warpclip${NC} [COMMAND] [OPTIONS]

${BOLD}COMMANDS:${NC}
  ${BOLD}copy${NC}                  Copy stdin to local clipboard (default if no command specified)
  ${BOLD}install-remote${NC} HOST   Install warpclip on a remote server
  ${BOLD}help${NC}                  Show this help message
  ${BOLD}version${NC}               Show version information

${BOLD}OPTIONS:${NC}
  ${BOLD}--port, -p${NC} PORT       Specify custom port (default: $PORT)
  ${BOLD}--path${NC} PATH           Remote installation path (default: ~/bin/warpclip)
  ${BOLD}--no-path-setup${NC}       Skip adding ~/bin to PATH in shell configuration files
  ${BOLD}--help, -h${NC}            Show help message
  ${BOLD}--version, -v${NC}         Show version information

${BOLD}ENVIRONMENT VARIABLES:${NC}
  ${BOLD}WARPCLIP_PORT${NC}            Override default remote port (9999)
  ${BOLD}WARPCLIP_LOCAL_PORT${NC}      Override default local port (8888)
  ${BOLD}WARPCLIP_TIMEOUT${NC}         Override default timeout (5 seconds)
  ${BOLD}WARPCLIP_INSTALL_PATH${NC}    Override default remote installation path

${BOLD}EXAMPLES:${NC}
  # Copy file contents to clipboard
  cat file.txt | warpclip
  
  # Same as above but explicit command
  cat file.txt | warpclip copy
  
  # Copy file with custom port
  cat file.txt | warpclip --port 12345
  
  # Install warpclip on a remote server
  warpclip install-remote user@remote-server
  
  # Install with custom remote path
  warpclip install-remote user@remote-server --path /usr/local/bin/warpclip
  
  # Install without modifying PATH
  warpclip install-remote user@remote-server --no-path-setup

${BOLD}NOTES:${NC}
  WarpClip requires SSH port forwarding to be set up in your SSH configuration.
  This is automatically configured when installing WarpClip via Homebrew.
  
  Your ~/.ssh/config should contain:
    Host *
        RemoteForward $PORT localhost:$LOCAL_PORT
        
  By default, the script is installed to ~/bin/warpclip on the remote server
  and the directory is added to PATH in the appropriate shell configuration file.

${BOLD}For more information, see:${NC} https://github.com/mquinnv/warpclip
EOF
}

# Copy stdin to clipboard (default action)
cmd_copy() {
    # First check if we're in an SSH session (unless forced)
    if ! check_remote; then
        print_error "This command should be run on a remote server via SSH."
        print_error "If you want to copy to clipboard locally, use 'pbcopy' instead."
        return 1
    fi
    
    # Check dependencies
    if ! check_dependencies; then
        return 1
    fi

    # Check if the tunnel is available
    if ! check_tunnel; then
        print_error "SSH tunnel not detected on port $PORT."
        echo ""
        echo "Make sure you connected with SSH using RemoteForward option:"
        echo "  ssh -R $PORT:localhost:$LOCAL_PORT user@$(hostname)"
        echo ""
        echo "Or add to your ~/.ssh/config:"
        echo "  Host $(hostname)"
        echo "      RemoteForward $PORT localhost:$LOCAL_PORT"
        return 1
    fi

    echo "Sending input to clipboard..." >&2
    if copy_to_clipboard; then
        print_success "Content copied to local clipboard successfully!" >&2
        return 0
    else
        print_error "Failed to copy content to clipboard." >&2
        echo "Check your SSH connection and port forwarding configuration." >&2
        return 1
    fi
}

# Install warpclip on a remote server
cmd_install_remote() {
    local target_host=""
    local remote_path="$REMOTE_INSTALL_PATH"
    local setup_path=true
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --path)
                remote_path="$2"
                shift 2
                ;;
            --no-path-setup)
                setup_path=false
                shift
                ;;
            -*)
                print_error "Unknown option: $1"
                cmd_help
                return 1
                ;;
            *)
                if [[ -z "$target_host" ]]; then
                    target_host="$1"
                    shift
                else
                    print_error "Unexpected argument: $1"
                    cmd_help
                    return 1
                fi
                ;;
        esac
    done
    
    if [[ -z "$target_host" ]]; then
        print_error "Please specify a target host"
        echo "Usage: warpclip install-remote user@host [--path REMOTE_PATH] [--no-path-setup]"
        return 1
    fi
    
    print_header "Installing WarpClip on $target_host"
    
    # Get the path to this script
    local script_path=$(which warpclip 2>/dev/null || echo "$0")
    
    # Check if script exists
    if [[ ! -f "$script_path" ]]; then
        print_error "Cannot find the warpclip script at $script_path"
        return 1
    fi
    
    echo -e "Installing from: ${BOLD}$script_path${NC}"
    echo -e "Installing to:   ${BOLD}$target_host:$remote_path${NC}"
    echo ""
    
    # Create the directory on the remote host
    echo "Creating remote directory..."
    ssh "$target_host" "mkdir -p $(dirname $remote_path)" || {
        print_error "Failed to create directory on remote host"
        return 1
    }
    
    # Copy the script
    echo "Copying warpclip script..."
    scp "$script_path" "$target_host:$remote_path" || {
        print_error "Failed to copy script to remote host"
        return 1
    }
    
    # Make it executable
    echo "Setting permissions..."
    ssh "$target_host" "chmod +x $remote_path" || {
        print_error "Failed to set executable permissions"
        return 1
    }
    
    # Check if the installation directory is in PATH
    local in_path=false
    local remote_dir=$(dirname "$remote_path")
    
    echo "Checking if installation directory is in PATH..."
    if ssh "$target_host" "echo \$PATH | grep -q \"${remote_dir}\""; then
        print_success "Installation directory is already in PATH"
        in_path=true
    else
        if [[ "$setup_path" == "true" ]]; then
            echo "Adding installation directory to PATH..."
            
            # Try to detect shell and configure PATH
            local shell_rc=""
            if ssh "$target_host" "[ -f ~/.bashrc ]"; then
                shell_rc="~/.bashrc"
                print_success "Found ~/.bashrc"
            elif ssh "$target_host" "[ -f ~/.zshrc ]"; then
                shell_rc="~/.zshrc"
                print_success "Found ~/.zshrc"
            elif ssh "$target_host" "[ -f ~/.profile ]"; then
                shell_rc="~/.profile"
                print_success "Found ~/.profile"
            else
                print_warning "Could not find shell configuration file"
                print_warning "You may need to add ${remote_dir} to your PATH manually"
            fi
            
            if [[ -n "$shell_rc" ]]; then
                # Add PATH entry to shell rc file
                ssh "$target_host" "echo 'export PATH=\"${remote_dir}:\$PATH\"' >> $shell_rc" || {
                    print_warning "Failed to update shell configuration"
                    print_warning "You may need to add ${remote_dir} to your PATH manually"
                }
                print_success "Added ${remote_dir} to PATH in $shell_rc"
                print_warning "You will need to restart your shell or run 'source $shell_rc' for PATH changes to take effect"
            fi
        else
            print_warning "Installation directory is not in PATH"
            print_warning "You may need to either:"
            echo "  1. Add ${remote_dir} to your PATH manually"
            echo "  2. Use the full path to run warpclip: ${remote_path}"
        fi
    fi
    
    # Test if warpclip works
    echo ""
    echo "Testing warpclip installation..."
    if ssh "$target_host" "$remote_path --version" &>/dev/null; then
        print_success "WarpClip test successful!"
    else
        print_warning "WarpClip test failed. You may need to add ${remote_dir} to your PATH manually"
    fi
    
    # Success
    echo ""
    print_success "WarpClip installed successfully on $target_host!"
    echo ""
    echo "You can now use it on the remote server:"
    
    if [[ "$in_path" == "true" || "$setup_path" == "true" ]]; then
        echo "  ${BOLD}cat file.txt | warpclip${NC}"
    else
        echo "  ${BOLD}cat file.txt | $remote_path${NC}"
    fi
    
    # Check if SSH config has the forwarding set up
    echo ""
    echo "Verifying SSH configuration..."
    local config_line="RemoteForward $PORT localhost:$LOCAL_PORT"
    if ! grep -q "$config_line" ~/.ssh/config 2>/dev/null; then
        print_warning "SSH forwarding configuration not found in your ~/.ssh/config"
        echo "To ensure automatic port forwarding, add this to your ~/.ssh/config:"
        echo ""
        echo "  Host $target_host"
        echo "      RemoteForward $PORT localhost:$LOCAL_PORT"
        echo ""
    else
        print_success "SSH forwarding configuration found in your ~/.ssh/config"
    fi
    
    return 0
}

# -----------------------------------------------------------------------------
# Main program
# -----------------------------------------------------------------------------

main() {
    # Parse command line arguments
    local cmd="copy"  # Default command
    local parsing_options=true
    local args=()
    
    # If no arguments provided and stdin is a tty, show help
    if [[ $# -eq 0 && -t 0 ]]; then
        cmd_help
        return 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --port|-p)
                PORT="$2"
                shift 2
                ;;
            --help|-h)
                cmd="help"
                shift
                ;;
            --version|-v)
                echo "WarpClip v$VERSION"
                return 0
                ;;
            --)
                parsing_options=false
                shift
                ;;
            -*)
                if $parsing_options; then
                    print_error "Unknown option: $1"
                    cmd_help
                    return 1
                else
                    args+=("$1")
                    shift
                fi
                ;;
            copy|help|version|install-remote)
                cmd="$1"
                shift
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Execute the requested command
    case "$cmd" in
        copy)
            cmd_copy
            ;;
        help)
            cmd_help
            ;;
        version)
            echo "WarpClip v$VERSION"
            ;;
        install-remote)
            cmd_install_remote "${args[@]}"
            ;;
        *)
            print_error "Unknown command: $cmd"
            cmd_help
            return 1
            ;;
    esac
    
    return $?
}

# Execute main function with all arguments
main "$@"

